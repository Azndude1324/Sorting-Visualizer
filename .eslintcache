[{"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\index.js":"1","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\App.js":"2","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\reportWebVitals.js":"3","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\SortingVisualizer\\SortingVisualizer.jsx":"4","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\quickSort.js":"5","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\heapSort.js":"6","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\insertionSort.js":"7","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\mergeSort.js":"8","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\bubbleSort.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":289,"mtime":1610532108786,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":13336,"mtime":1611747134004,"results":"14","hashOfConfig":"11"},{"size":2432,"mtime":1611746247564,"results":"15","hashOfConfig":"11"},{"size":1039,"mtime":1611745804426,"results":"16","hashOfConfig":"11"},{"size":978,"mtime":1611743869134,"results":"17","hashOfConfig":"11"},{"size":2957,"mtime":1611746070571,"results":"18","hashOfConfig":"11"},{"size":1097,"mtime":1611745742219,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"rkpm5u",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\index.js",[],["42","43"],"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\App.js",["44"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\SortingVisualizer\\SortingVisualizer.jsx",["45","46","47","48","49","50","51","52","53","54","55"],"import React from 'react';\r\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort.js';\r\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\r\nimport { getHeapSortAnimations } from '../sortingAlgorithms/heapSort.js';\r\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort.js';\r\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nvar ANIMATION_SPEED_MS = 3;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'grey';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [], arrLength: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({arrLength: event.target.value});\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < this.state.arrLength; i++) {\r\n            array.push(randomIntFromInterval(1, 600));\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    mergeSort() {\r\n        this.disableSortButtons();\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        } else {\r\n            setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n\r\n        const restore = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreSortButtons(), restore);\r\n    }\r\n\r\n    quickSort() {\r\n        this.disableSortButtons();\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparison1\") || (animations[i][0] === \"comparison2\")\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            \r\n            if (isColorChange) {\r\n                const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparison, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n        const restore = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreSortButtons(), restore);\r\n    }\r\n\r\n    heapSort() {\r\n        this.disableSortButtons();\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            }\r\n            else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n\r\n\r\n        const restore = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreSortButtons(), restore);\r\n    }\r\n\r\n    bubbleSort() {\r\n        this.disableSortButtons();\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            if(isColorChange === true) {\r\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [comparison, barOneIndex, barTwoIndex] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIndex].style;\r\n                const barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [swap, barIndex, newHeight] = animations[i];\r\n                if (barIndex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                },i * ANIMATION_SPEED_MS);  \r\n            }\r\n        }\r\n\r\n        const restore = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreSortButtons(), restore);\r\n    }\r\n\r\n    insertionSort(){\r\n        this.disableSortButtons();\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = (animations[i][0] === \"comparison1\") || (animations[i][0] === \"comparison2\")\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            \r\n            if(isColorChange === true){\r\n                const color = (animations[i][0] === \"comparison1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    let temp = barOneStyle.height;\r\n                    barOneStyle.height = barTwoStyle.height;\r\n                    barTwoStyle.height = temp;\r\n                    \r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                const [temp, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n        const restore = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\r\n        setTimeout(() => this.restoreSortButtons(), restore);\r\n    }\r\n\r\n    disableSortButtons(){\r\n        document.getElementById(\"mergeSort\").disabled = true;\r\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = \"Currently Disabled\";\r\n        buttonStyle.cursor = \"default\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = \"Currently Disabled\";\r\n        buttonStyle.cursor = \"default\";\r\n        \r\n        document.getElementById(\"heapSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"heapSort\").style;\r\n        document.getElementById(\"heapSort\").title = \"Currently Disabled\";\r\n        buttonStyle.cursor = \"default\";\r\n        \r\n        document.getElementById(\"bubbleSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = \"Currently Disabled\";\r\n        buttonStyle.cursor = \"default\";\r\n        \r\n        document.getElementById(\"insertionSort\").disabled = true;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = \"Currently Disabled\";\r\n        buttonStyle.cursor = \"default\";\r\n    }\r\n    restoreSortButtons(){\r\n        document.getElementById(\"mergeSort\").disabled = false;\r\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\r\n        document.getElementById(\"mergeSort\").title = \"Currently Enabled\";\r\n        buttonStyle.cursor = \"default\";\r\n\r\n        document.getElementById(\"quickSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"quickSort\").style;\r\n        document.getElementById(\"quickSort\").title = \"Currently Enabled\";\r\n        buttonStyle.cursor = \"default\";\r\n        \r\n        document.getElementById(\"heapSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"heapSort\").style;\r\n        document.getElementById(\"heapSort\").title = \"Currently Enabled\";\r\n        buttonStyle.cursor = \"default\";\r\n        \r\n        document.getElementById(\"bubbleSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\r\n        document.getElementById(\"bubbleSort\").title = \"Currently Enabled\";\r\n        buttonStyle.cursor = \"default\";\r\n        \r\n        document.getElementById(\"insertionSort\").disabled = false;\r\n        buttonStyle = document.getElementById(\"insertionSort\").style;\r\n        document.getElementById(\"insertionSort\").title = \"Currently Enabled\";\r\n        buttonStyle.cursor = \"default\";\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            //Create Top Panel & Visualizer\r\n            <>\r\n                <div className=\"panel-container\">\r\n                    <h2>Sorting Visualizer by Ed</h2>\r\n                    <h4>\r\n                        <label>Size of Array[5,100]: </label>\r\n                        <input type=\"number\" min=\"5\" max=\"100\" value={this.state.value} onChange={this.handleChange} />\r\n                        <input type=\"submit\" value=\"Generate\" onClick={() => this.resetArray()}/>\r\n                    </h4>\r\n                    <button id = \"mergeSort\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button id = \"quickSort\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n                    <button id = \"heapSort\" onClick={() => this.heapSort()}>Heap Sort</button>\r\n                    <button id = \"bubbleSort\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <button id = \"insertionSort\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                </div>\r\n\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                height: `${value}px`,\r\n                            }}></div>\r\n                    ))}\r\n                </div>\r\n\r\n                <script>\r\n                    var numArray = document.getElementById(\"numArray\");\r\n                    var animationSpd = document.getElementById(\"animationSpd\");\r\n                    var output = document.getElementById(\"demo\");\r\n\r\n                    output.innerHTML = <slider className=\"value\"></slider>\r\n                </script>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n//RNG Generator\r\nfunction randomIntFromInterval(min, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\quickSort.js",[],"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\heapSort.js",[],"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\insertionSort.js",[],["56","57"],"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\mergeSort.js",[],"C:\\Users\\Ed\\Documents\\GitHub\\Sorting-Visualizer\\src\\sortingAlgorithms\\bubbleSort.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":12},{"ruleId":"62","severity":1,"message":"66","line":83,"column":24,"nodeType":"64","messageId":"65","endLine":83,"endColumn":34},{"ruleId":"62","severity":1,"message":"67","line":92,"column":24,"nodeType":"64","messageId":"65","endLine":92,"endColumn":28},{"ruleId":"62","severity":1,"message":"67","line":117,"column":24,"nodeType":"64","messageId":"65","endLine":117,"endColumn":28},{"ruleId":"62","severity":1,"message":"67","line":127,"column":24,"nodeType":"64","messageId":"65","endLine":127,"endColumn":28},{"ruleId":"68","severity":1,"message":"69","line":146,"column":52,"nodeType":"70","messageId":"71","endLine":146,"endColumn":54},{"ruleId":"68","severity":1,"message":"69","line":146,"column":90,"nodeType":"70","messageId":"71","endLine":146,"endColumn":92},{"ruleId":"68","severity":1,"message":"69","line":149,"column":49,"nodeType":"70","messageId":"71","endLine":149,"endColumn":51},{"ruleId":"62","severity":1,"message":"66","line":150,"column":24,"nodeType":"64","messageId":"65","endLine":150,"endColumn":34},{"ruleId":"62","severity":1,"message":"72","line":159,"column":24,"nodeType":"64","messageId":"65","endLine":159,"endColumn":28},{"ruleId":"62","severity":1,"message":"67","line":184,"column":24,"nodeType":"64","messageId":"65","endLine":184,"endColumn":28},{"ruleId":"62","severity":1,"message":"67","line":196,"column":24,"nodeType":"64","messageId":"65","endLine":196,"endColumn":28},{"ruleId":"58","replacedBy":"73"},{"ruleId":"60","replacedBy":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'comparison' is assigned a value but never used.","'temp' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'swap' is assigned a value but never used.",["75"],["76"],"no-global-assign","no-unsafe-negation"]